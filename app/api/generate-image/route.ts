import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { prompt, count = 1 } = await request.json();

    if (!prompt) {
      return NextResponse.json(
        { error: 'Prompt is required' },
        { status: 400 }
      );
    }

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      return NextResponse.json(
        { error: 'API key not configured' },
        { status: 500 }
      );
    }

    // Use Gemini 2.5 Flash Image Preview for image generation
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `Generate a high-quality image: ${prompt}. Make it photorealistic and detailed.`
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 8192,
          }
        }),
      }
    );

    if (!response.ok) {
      const error = await response.text();
      console.error('Gemini API error:', error);
      console.error('Response status:', response.status);
      console.error('Response headers:', response.headers);
      return NextResponse.json(
        { error: `Failed to generate image: ${error}` },
        { status: response.status }
      );
    }

    const data = await response.json();
    
    // Check if the response contains actual images
    if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
      const images = data.candidates[0].content.parts
        .filter((part: any) => part.inlineData && part.inlineData.mimeType.startsWith('image/'));
      
      if (images.length > 0) {
        // Return the full candidates structure that frontend expects
        return NextResponse.json({ candidates: data.candidates });
      }
    }
    
    // If no real images were generated, return an error
    return NextResponse.json({ 
      error: 'No images were generated by the API.' 
    }, { status: 500 });

  } catch (error) {
    console.error('Image generation error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}